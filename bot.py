import logging
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import BOT_TOKEN, ALLOWED_USERS, POINTS_WINNER, POINTS_SCORE, POINTS_BOTH
from database import Database
from football_api import FootballAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_MATCH, CHOOSING_WINNER, ENTERING_SCORE = range(3)

class FootballBetBot:
    def __init__(self):
        self.db = Database()
        self.football_api = FootballAPI()
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Bet Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á–∏ Real Madrid vs Barcelona.

**üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/matches - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
/bet - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
/standings - –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
/help - –°–ø—Ä–∞–≤–∫–∞

**üèÜ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:**
‚Ä¢ 1 –±–∞–ª–ª –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ 3 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ 4 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏ —Å—á–µ—Ç

–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /matches —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏!
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**/start** - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
**/matches** - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
**/bet** - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
**/standings** - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
**/help** - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üéØ –ö–∞–∫ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /matches –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π
2. –í—ã–±–µ—Ä–∏—Ç–µ /bet –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –∏–∑ —Å–ø–∏—Å–∫–∞
4. –£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ / –ù–∏—á—å—è / –ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞)
5. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1)

**üèÜ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:**
‚Ä¢ 1 –±–∞–ª–ª –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ 3 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ 4 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏ —Å—á–µ—Ç
‚Ä¢ 0 –±–∞–ª–ª–æ–≤, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–≥–∞–¥–∞–Ω–æ

**‚öΩ –°—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –º–∞—Ç—á–∏ Real Madrid vs Barcelona**
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /matches"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ API
        matches = self.football_api.get_real_barcelona_matches()
        
        if not matches:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for match in matches:
            match_info = self.football_api.format_match_info(match)
            self.db.add_match(
                match_info['id'],
                match_info['home_team'],
                match_info['away_team'],
                match_info['match_date'],
                match_info['tournament']
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ç—á–µ–π
        matches_text = "üìÖ **–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ Real Madrid vs Barcelona:**\n\n"
        
        for i, match in enumerate(matches, 1):
            match_info = self.football_api.format_match_info(match)
            matches_text += f"{i}. **{match_info['home_team']} vs {match_info['away_team']}**\n"
            matches_text += f"   üìÖ {match_info['formatted_date']}\n"
            matches_text += f"   üèÜ {match_info['tournament']}\n\n"
        
        matches_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bet –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –º–∞—Ç—á–µ–π!"
        
        await update.message.reply_text(matches_text, parse_mode='Markdown')
    
    async def bet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bet"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
        matches = self.db.get_upcoming_matches()
        
        if not matches:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ç—á–∞–º–∏
        keyboard = []
        for match in matches:
            match_text = f"{match[2]} vs {match[3]} - {match[5]}"
            keyboard.append([InlineKeyboardButton(match_text, callback_data=f"match_{match[0]}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öΩ **–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è —Å—Ç–∞–≤–∫–∏:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CHOOSING_MATCH
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        if query.data == "cancel":
            await query.edit_message_text("‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return ConversationHandler.END
        
        if query.data.startswith("match_"):
            match_id = int(query.data.split("_")[1])
            match = self.db.get_match(match_id)
            
            if not match:
                await query.edit_message_text("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_match'] = match
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            keyboard = [
                [InlineKeyboardButton(f"üè† {match[2]} (–î–æ–º–∞—à–Ω—è—è)", callback_data="winner_home")],
                [InlineKeyboardButton("ü§ù –ù–∏—á—å—è", callback_data="winner_draw")],
                [InlineKeyboardButton(f"‚úàÔ∏è {match[3]} (–ì–æ—Å—Ç–µ–≤–∞—è)", callback_data="winner_away")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚öΩ **{match[2]} vs {match[3]}**\n\n"
                f"üìÖ {match[4]}\n"
                f"üèÜ {match[5]}\n\n"
                "üéØ **–ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç?**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CHOOSING_WINNER
        
        elif query.data.startswith("winner_"):
            winner = query.data.split("_")[1]
            context.user_data['predicted_winner'] = winner
            
            match = context.user_data['selected_match']
            
            await query.edit_message_text(
                f"‚öΩ **{match[2]} vs {match[3]}**\n\n"
                f"üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {self._get_winner_text(winner, match)}\n\n"
                "üìä **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1):**",
                parse_mode='Markdown'
            )
            
            return ENTERING_SCORE
    
    def _get_winner_text(self, winner, match):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        if winner == 'home':
            return f"üè† {match[2]}"
        elif winner == 'away':
            return f"‚úàÔ∏è {match[3]}"
        else:
            return "ü§ù –ù–∏—á—å—è"
    
    async def handle_score_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return ConversationHandler.END
        
        score_text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞
        if not re.match(r'^\d+:\d+$', score_text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X:Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1)"
            )
            return ENTERING_SCORE
        
        home_score, away_score = map(int, score_text.split(':'))
        
        if home_score < 0 or away_score < 0:
            await update.message.reply_text("‚ùå –°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return ENTERING_SCORE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        match = context.user_data['selected_match']
        predicted_winner = context.user_data['predicted_winner']
        
        bet_id = self.db.add_bet(
            user_id,
            match[0],
            predicted_winner,
            home_score,
            away_score
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        confirmation_text = f"""
‚úÖ **–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**

‚öΩ **–ú–∞—Ç—á:** {match[2]} vs {match[3]}
üìÖ **–î–∞—Ç–∞:** {match[4]}
üèÜ **–¢—É—Ä–Ω–∏—Ä:** {match[5]}

üéØ **–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑:**
‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {self._get_winner_text(predicted_winner, match)}
‚Ä¢ –°—á–µ—Ç: {home_score}:{away_score}

üí∞ **–í–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–ª–ª—ã:**
‚Ä¢ 1 –±–∞–ª–ª –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ 3 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ 4 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏ —Å—á–µ—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /standings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
        """
        
        await update.message.reply_text(confirmation_text, parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        return ConversationHandler.END
    
    async def standings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /standings"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        standings = self.db.get_standings()
        
        if not standings:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
        
        standings_text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n\n"
        
        for i, (username, first_name, last_name, *stats) in enumerate(standings, 1):
            display_name = username or f"{first_name} {last_name}".strip() or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {stats[0]}"
            
            standings_text += f"{i}. **{display_name}**\n"
            standings_text += f"   üìä –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {stats[1]}\n"
            standings_text += f"   ‚úÖ –£–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {stats[2]}\n"
            standings_text += f"   üéØ –£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤: {stats[3]}\n"
            standings_text += f"   üìù –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {stats[4]}\n\n"
        
        await update.message.reply_text(standings_text, parse_mode='Markdown')
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    bot = FootballBetBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("matches", bot.matches))
    application.add_handler(CommandHandler("standings", bot.standings))
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Å—Ç–∞–≤–æ–∫
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("bet", bot.bet)],
        states={
            CHOOSING_MATCH: [CallbackQueryHandler(bot.button_handler)],
            CHOOSING_WINNER: [CallbackQueryHandler(bot.button_handler)],
            ENTERING_SCORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_score_input)]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ Football Bet Bot –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main() 