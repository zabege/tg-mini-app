import os
import sys
import asyncio
import logging
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import BOT_TOKEN, ALLOWED_USERS, POINTS_WINNER, POINTS_SCORE, POINTS_BOTH
from database import Database
from football_api import FootballAPI
import fcntl
import atexit
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_MATCH, CHOOSING_WINNER, ENTERING_SCORE = range(3)

class FootballBetBot:
    def __init__(self):
        self.db = Database()
        self.football_api = FootballAPI()
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.lock_file = "/tmp/football_bot.lock"
        self.lock_fd = None
        
    def acquire_lock(self):
        """–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            self.lock_fd = open(self.lock_file, 'w')
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            logging.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        except (IOError, OSError) as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: {e}")
            return False
            
    def release_lock(self):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        if self.lock_fd:
            try:
                fcntl.flock(self.lock_fd, fcntl.LOCK_UN)
                self.lock_fd.close()
                if os.path.exists(self.lock_file):
                    os.unlink(self.lock_file)
                logging.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.release_lock()
        sys.exit(0)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = update.effective_user
        self.db.add_user(user.id, user.first_name, user.username or "")
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Bet Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á–∏ Real Madrid –∏ Barcelona.

**üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/calendar - 10 –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π
/next - –ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á
/bet - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É (10 –±–ª–∏–∂–∞–π—à–∏—Ö)
/standings - –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
/help - –°–ø—Ä–∞–≤–∫–∞

**üèÜ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:**
‚Ä¢ 1 –±–∞–ª–ª –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ 3 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ 4 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏ —Å—á–µ—Ç

–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /calendar —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏!
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        help_text = """
ü§ñ **Football Bet Bot - –°–ø—Ä–∞–≤–∫–∞**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/calendar` - –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π
‚Ä¢ `/next` - –ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á
‚Ä¢ `/bet` - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
‚Ä¢ `/standings` - –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ **–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:**
‚Ä¢ 1 –±–∞–ª–ª –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ 3 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ 4 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏ —Å—á–µ—Ç

‚öΩ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥
‚Ä¢ –ë–∞—Ä—Å–µ–ª–æ–Ω–∞

–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫! üçÄ
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(self.db.users)
        total_matches = len(self.db.matches)
        total_bets = len(self.db.bets)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
        finished_matches = sum(1 for match in self.db.matches.values() if match['status'] == 'finished')
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã
        total_points = sum(bet['points'] for bet in self.db.bets.values())
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {total_users}
‚öΩ **–ú–∞—Ç—á–∏:** {total_matches} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {finished_matches})
üí∞ **–°—Ç–∞–≤–∫–∏:** {total_bets}
üèÜ **–û–±—â–∏–µ –±–∞–ª–ª—ã:** {total_points}

üìÅ **–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:** `bot_data.json`
üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    
    async def matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /matches"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ API
        matches = self.football_api.get_real_barcelona_matches()
        
        if not matches:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for match in matches:
            match_info = self.football_api.format_match_info(match)
            self.db.add_match(
                match_info['id'],
                match_info['home_team'],
                match_info['away_team'],
                match_info['match_date'],
                match_info['tournament']
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ç—á–µ–π
        matches_text = "üìÖ **–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ Real Madrid vs Barcelona:**\n\n"
        
        for i, match in enumerate(matches, 1):
            match_info = self.football_api.format_match_info(match)
            matches_text += f"{i}. **{match_info['home_team']} vs {match_info['away_team']}**\n"
            matches_text += f"   üìÖ {match_info['formatted_date']}\n"
            matches_text += f"   üèÜ {match_info['tournament']}\n\n"
        
        matches_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bet –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –º–∞—Ç—á–µ–π!"
        
        await update.message.reply_text(matches_text, parse_mode='Markdown')
    
    async def calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calendar - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 10 –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º 10 –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π
            matches = self.football_api.get_next_matches(10)
            
            if not matches:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            calendar_text = "üìÖ **10 –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π:**\n\n"
            
            for i, match in enumerate(matches, 1):
                home_team = match['homeTeam']['name']
                away_team = match['awayTeam']['name']
                match_date = datetime.fromisoformat(match['utcDate'].replace('Z', '+00:00'))
                formatted_date = match_date.strftime('%d.%m.%Y %H:%M')
                competition = match['competition']['name']
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
                if 'Real Madrid' in home_team or 'Real Madrid' in away_team:
                    team_emoji = "‚ö™"
                elif 'Barcelona' in home_team or 'Barcelona' in away_team:
                    team_emoji = "üîµ"
                else:
                    team_emoji = "‚öΩ"
                
                calendar_text += f"{i}. {team_emoji} **{home_team} vs {away_team}**\n"
                calendar_text += f"   üìÖ {formatted_date} | üèÜ {competition}\n\n"
            
            await update.message.reply_text(calendar_text, parse_mode='Markdown')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
    
    async def next_match(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /next - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á
            match = self.football_api.get_nearest_match()
            
            if not match:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            home_team = match['homeTeam']['name']
            away_team = match['awayTeam']['name']
            match_date = datetime.fromisoformat(match['utcDate'].replace('Z', '+00:00'))
            formatted_date = match_date.strftime('%d.%m.%Y %H:%M')
            competition = match['competition']['name']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –º–∞—Ç—á–∞
            now = datetime.now(match_date.tzinfo)
            time_until = match_date - now
            
            if time_until.days > 0:
                time_text = f"—á–µ—Ä–µ–∑ {time_until.days} –¥–Ω–µ–π"
            elif time_until.seconds > 3600:
                hours = time_until.seconds // 3600
                time_text = f"—á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤"
            else:
                minutes = time_until.seconds // 60
                time_text = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç"
            
            next_match_text = f"""
‚öΩ **–ë–õ–ò–ñ–ê–ô–®–ò–ô –ú–ê–¢–ß**

üèüÔ∏è **{home_team} vs {away_team}**
üìÖ **–î–∞—Ç–∞:** {formatted_date}
‚è∞ **–î–æ –º–∞—Ç—á–∞:** {time_text}
üèÜ **–¢—É—Ä–Ω–∏—Ä:** {competition}

üéØ –ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bet!
            """
            
            await update.message.reply_text(next_match_text, parse_mode='Markdown')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–∞—Ç—á–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–∞—Ç—á–∞.")
    
    async def bet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bet - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 10 –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º 10 –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫
            matches = self.football_api.get_upcoming_matches_for_betting(10)
            
            if not matches:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ç—á–∞–º–∏
            keyboard = []
            for match in matches:
                home_team = match['homeTeam']['name']
                away_team = match['awayTeam']['name']
                match_date = datetime.fromisoformat(match['utcDate'].replace('Z', '+00:00'))
                formatted_date = match_date.strftime('%d.%m %H:%M')
                competition = match['competition']['name']
                
                match_text = f"{home_team} vs {away_team} - {formatted_date}"
                keyboard.append([InlineKeyboardButton(match_text, callback_data=f"match_{match['id']}")])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öΩ **–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è —Å—Ç–∞–≤–∫–∏ (10 –±–ª–∏–∂–∞–π—à–∏—Ö):**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CHOOSING_MATCH
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π.")
            return ConversationHandler.END
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        if query.data == "cancel":
            await query.edit_message_text("‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return ConversationHandler.END
        
        if query.data.startswith("match_"):
            match_id = int(query.data.split("_")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
            matches = self.football_api.get_upcoming_matches_for_betting(10)
            match = None
            
            for m in matches:
                if m['id'] == match_id:
                    match = m
                    break
            
            if not match:
                await query.edit_message_text("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_match'] = match
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            home_team = match['homeTeam']['name']
            away_team = match['awayTeam']['name']
            
            keyboard = [
                [InlineKeyboardButton(f"üè† {home_team} (–î–æ–º–∞—à–Ω—è—è)", callback_data="winner_home")],
                [InlineKeyboardButton("ü§ù –ù–∏—á—å—è", callback_data="winner_draw")],
                [InlineKeyboardButton(f"‚úàÔ∏è {away_team} (–ì–æ—Å—Ç–µ–≤–∞—è)", callback_data="winner_away")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            match_date = datetime.fromisoformat(match['utcDate'].replace('Z', '+00:00'))
            formatted_date = match_date.strftime('%d.%m.%Y %H:%M')
            competition = match['competition']['name']
            
            await query.edit_message_text(
                f"‚öΩ **{home_team} vs {away_team}**\n\n"
                f"üìÖ {formatted_date}\n"
                f"üèÜ {competition}\n\n"
                "üéØ **–ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç?**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CHOOSING_WINNER
        
        elif query.data.startswith("winner_"):
            winner = query.data.split("_")[1]
            context.user_data['predicted_winner'] = winner
            
            match = context.user_data['selected_match']
            
            await query.edit_message_text(
                f"‚öΩ **{match['homeTeam']['name']} vs {match['awayTeam']['name']}**\n\n"
                f"üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {self._get_winner_text(winner, match)}\n\n"
                "üìä **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1):**",
                parse_mode='Markdown'
            )
            
            return ENTERING_SCORE
    
    def _get_winner_text(self, winner, match):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        if winner == 'home':
            return f"üè† {match['homeTeam']['name']}"
        elif winner == 'away':
            return f"‚úàÔ∏è {match['awayTeam']['name']}"
        else:
            return "ü§ù –ù–∏—á—å—è"
    
    async def handle_score_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return ConversationHandler.END
        
        score_text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞
        if not re.match(r'^\d+:\d+$', score_text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X:Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1)"
            )
            return ENTERING_SCORE
        
        home_score, away_score = map(int, score_text.split(':'))
        
        if home_score < 0 or away_score < 0:
            await update.message.reply_text("‚ùå –°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return ENTERING_SCORE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        match = context.user_data['selected_match']
        predicted_winner = context.user_data['predicted_winner']
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        self.db.add_match(
            match['id'],
            match['homeTeam']['name'],
            match['awayTeam']['name'],
            match['utcDate'],
            match['competition']['name']
        )
        
        bet_id = self.db.add_bet(
            user_id,
            match['id'],
            predicted_winner,
            home_score,
            away_score
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        match_date = datetime.fromisoformat(match['utcDate'].replace('Z', '+00:00'))
        formatted_date = match_date.strftime('%d.%m.%Y %H:%M')
        
        confirmation_text = f"""
‚úÖ **–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**

‚öΩ **–ú–∞—Ç—á:** {match['homeTeam']['name']} vs {match['awayTeam']['name']}
üìÖ **–î–∞—Ç–∞:** {formatted_date}
üèÜ **–¢—É—Ä–Ω–∏—Ä:** {match['competition']['name']}

üéØ **–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑:**
‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {self._get_winner_text(predicted_winner, match)}
‚Ä¢ –°—á–µ—Ç: {home_score}:{away_score}

üí∞ **–í–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–ª–ª—ã:**
‚Ä¢ 1 –±–∞–ª–ª –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ 3 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ 4 –±–∞–ª–ª–∞ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏ —Å—á–µ—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /standings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
        """
        
        await update.message.reply_text(confirmation_text, parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        return ConversationHandler.END
    
    async def standings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /standings"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ALLOWED_USERS –Ω–µ –ø—É—Å—Ç–æ–π
        if ALLOWED_USERS and user_id not in ALLOWED_USERS:
            return
        
        standings = self.db.get_standings()
        
        if not standings:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
        
        standings_text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n\n"
        
        for i, (user_id, username, total_points, correct_winners, correct_scores, total_bets) in enumerate(standings, 1):
            display_name = username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            
            standings_text += f"{i}. **{display_name}**\n"
            standings_text += f"   üìä –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_points}\n"
            standings_text += f"   ‚úÖ –£–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {correct_winners}\n"
            standings_text += f"   üéØ –£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤: {correct_scores}\n"
            standings_text += f"   üìù –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_bets}\n\n"
        
        await update.message.reply_text(standings_text, parse_mode='Markdown')
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    bot = FootballBetBot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if not bot.acquire_lock():
        print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –í—ã—Ö–æ–¥.")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, bot.signal_handler)
    signal.signal(signal.SIGTERM, bot.signal_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    atexit.register(bot.release_lock)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("matches", bot.matches))
    application.add_handler(CommandHandler("calendar", bot.calendar))
    application.add_handler(CommandHandler("next", bot.next_match))
    application.add_handler(CommandHandler("stats", bot.stats))
    application.add_handler(CommandHandler("standings", bot.standings))
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Å—Ç–∞–≤–æ–∫
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("bet", bot.bet)],
        states={
            SELECTING_MATCH: [CallbackQueryHandler(bot.button_handler)],
            SELECTING_WINNER: [CallbackQueryHandler(bot.button_handler)],
            ENTERING_SCORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_score_input)]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ Football Bet Bot –∑–∞–ø—É—â–µ–Ω...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        bot.release_lock()

if __name__ == '__main__':
    main() 