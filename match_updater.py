import time
import schedule
from datetime import datetime, timedelta
from database import Database
from football_api import FootballAPI
from config import POINTS_WINNER, POINTS_SCORE, POINTS_BOTH

class MatchUpdater:
    def __init__(self):
        self.db = Database()
        self.football_api = FootballAPI()
    
    def update_finished_matches(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π... {datetime.now()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        with self.db.db_path as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, api_match_id, home_team, away_team, match_date
                FROM matches 
                WHERE status = 'SCHEDULED' 
                AND match_date < datetime('now', '-2 hours')
            ''')
            
            matches_to_update = cursor.fetchall()
        
        for match in matches_to_update:
            match_id, api_match_id, home_team, away_team, match_date = match
            
            print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á: {home_team} vs {away_team}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ API
            result = self.football_api.get_match_result(api_match_id)
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
                self.db.update_match_result(
                    match_id, 
                    result['home_score'], 
                    result['away_score']
                )
                
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {result['home_score']}:{result['away_score']}")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
                self.calculate_points_for_match(match_id)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
    
    def calculate_points_for_match(self, match_id):
        """–†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç—á"""
        with self.db.db_path as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id FROM bets WHERE match_id = ? AND points_earned = 0
            ''', (match_id,))
            
            bets = cursor.fetchall()
        
        for bet in bets:
            bet_id = bet[0]
            points = self.db.calculate_bet_points(bet_id)
            
            if points > 0:
                print(f"üèÜ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –∑–∞ —Å—Ç–∞–≤–∫—É {bet_id}")
            else:
                print(f"üíî 0 –±–∞–ª–ª–æ–≤ –∑–∞ —Å—Ç–∞–≤–∫—É {bet_id}")
    
    def add_demo_results(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéÆ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–º–æ-–º–∞—Ç—á–∏
        demo_matches = self.football_api._get_demo_matches()
        
        for i, match in enumerate(demo_matches):
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if i == 0:  # –ü–µ—Ä–≤—ã–π –º–∞—Ç—á: Real Madrid 2:1 Barcelona
                home_score, away_score = 2, 1
            elif i == 1:  # –í—Ç–æ—Ä–æ–π –º–∞—Ç—á: Barcelona 1:1 Real Madrid
                home_score, away_score = 1, 1
            else:  # –¢—Ä–µ—Ç–∏–π –º–∞—Ç—á: Real Madrid 3:2 Barcelona
                home_score, away_score = 3, 2
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –≤ –±–∞–∑—É
            match_info = self.football_api.format_match_info(match)
            db_match_id = self.db.add_match(
                match_info['id'],
                match_info['home_team'],
                match_info['away_team'],
                match_info['match_date'],
                match_info['tournament']
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.db.update_match_result(db_match_id, home_score, away_score)
            
            print(f"üéØ –î–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {match_info['home_team']} {home_score}:{away_score} {match_info['away_team']}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        print("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ç—á–µ–π...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(30).minutes.do(self.update_finished_matches)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_finished_matches()
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π"""
    updater = MatchUpdater()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    updater.add_demo_results()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    updater.run_scheduler()

if __name__ == '__main__':
    main() 